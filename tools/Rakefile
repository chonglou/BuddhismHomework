require 'yaml'
require 'json'
require 'net/http'
require 'sqlite3'
require 'highline/import'
require 'nokogiri'
require 'open-uri'
require 'fileutils'
require 'digest'

RES_ROOT = "#{File.dirname(__FILE__)}/../app/src/main/res"

def load_cfg
  YAML.load_file('config.yml')
end

def http_json_get(url)
  JSON.parse Net::HTTP.get(URI(url))
end

def http_html_get(url)
  Nokogiri::HTML open(url)
end

def dump_str(s)
  #s.inspect[1..-2].gsub(/'/, "''")
  s.gsub(/'/, "''")
end

desc '生成MD5文件'
task :md5 do
  files = load_cfg.fetch('download').map do |k, v|
    n=v['name']
    n ||= k
    {
        name: k,
        dropbox: v.fetch('dropbox'),
        md5: Digest::MD5.file("#{File.dirname __FILE__}/tmp/#{n}").hexdigest
    }
  end
  File.open("#{File.dirname __FILE__}/tmp/file.lst", 'w') do |f|
    f.puts files.to_json
  end
end

desc '测试数据库脚本'
task :sql do
  %w(cbeta videos).each do |name|
    sql = "#{File.dirname __FILE__}/tmp/#{name}.sql"
    if File.exists?(sql)
      puts "测试[#{name}]"
      puts `cat #{sql} | sqlite3 /tmp/bh.db`
    end
  end
end


namespace :adb do
  desc '启动模拟器'
  task :em do
    sd = '/tmp/sd0'
    unless File.file?(sd)
      size = ask('虚拟SD卡大小？(G) ', Integer) do |q|
        q.in=2..8
        q.default = 2
      end
      puts `mksdcard #{size}G #{sd}`
    end
    wipe = ask('擦除虚拟SD卡？(y/n) ') { |q| q.default='n' }
    puts `/opt/android-sdk/tools/emulator64-arm -avd galaxy -netspeed full -netdelay none -sdcard #{sd} #{'-wipe-data' if wipe == 'y'}`
  end

  desc '网络调试连接'
  task :net do
    ip = ask('IP地址？ ') { |q| q.default='localhost' }
    port = ask('端口？ ', Integer) do |q|
      q.in=1024..65535
      q.default = 5555
    end
    puts `adb connect #{ip}:#{port}`
  end
end


namespace :image do
  desc '转换图片大小'
  task :convert do
    %w(books courses cbeta launcher morning musics evening sitting videos dict dzj zoom_in zoom_out action_favorite previous next ddc home help storage).each do |i|
      j="ic_#{i}.png"
      t = "#{RES_ROOT}/drawable"
      if File.file?("images/#{j}")
        puts "转换[#{j}]"
        `convert -resize 48x48 images/#{j} #{t}-mdpi/#{j}`
        `convert -resize 72x72 images/#{j} #{t}-hdpi/#{j}`
        `convert -resize 96x96 images/#{j} #{t}-xhdpi/#{j}`
        `convert -resize 144x144 images/#{j} #{t}-xxhdpi/#{j}`
      end
    end
  end
end


def random_name(name)
  "#{name}-#{Time.now.strftime '%Y%m%d%H%M%S'}"
end

def list_cbeta
  cbeta = "#{File.dirname __FILE__}/tmp/cbeta"
  puts `[ ! -d #{cbeta} ] && mkdir -pv #{cbeta} && cd #{cbeta} && unzip ../cbeta_epub_201405.zip`

  books=[]
  IO.foreach("#{cbeta}/filelist.txt") do |line|
    ss = line.split "\t\t"
    i = ss[1].index '【'

    name = ss[0].chomp
    books << {
        name: name,
        title: (ss[1][i-1] == '　' ? ss[1][0..i-2] : ss[1][0..i-1]).chomp,
        author: ss[1][i..-1].chomp,
        size: File.stat("#{cbeta}/#{name}").size
    }
  end
  books
end


namespace :book do
  desc '转成mobi格式(by calibre)'
  task :mobi do
    books = list_cbeta
    cur = File.dirname __FILE__
    dest = "#{cur}/tmp/mobis"
    unless Dir.exist?(dest)
      FileUtils.mkdir_p dest
    end
    books.each do |b|
      fn = "#{b.fetch :title}#{b.fetch :author}"
      fn = fn.gsub ' ', '-'
      fn = fn.gsub '(', '（'
      fn = fn.gsub ')', '）'
      fn = fn.gsub '　', '-'
      fn = fn.gsub '--', '-'
      fn = fn.gsub '【】', ''
      puts `ebook-convert #{cur}/tmp/cbeta/#{b.fetch :name} #{dest}/#{fn}.mobi 2> #{cur}/tmp/convert.err`
      #puts `cp #{cur}/tmp/cbeta/#{b.fetch :name} #{dest}/#{fn}.epub 2> #{cur}/tmp/convert.err`
    end
  end
end

namespace :crawler do

  desc '采集CBETA'
  task :cbeta do

    books = list_cbeta

    File.open("#{File.dirname __FILE__}/../app/src/main/res/raw/cbeta201405.json", 'w') do |f|
      f.puts books.to_json
    end

    puts "采集到#{books.size}本书"
    File.open("#{File.dirname __FILE__}/../app/src/main/res/raw/favorites.json", 'w') do |f|
      f.puts %w(T08/T08n0235.epub T08/T08n0251.epub T17/T17n0842.epub T16/T16n0670.epub T19/T19n0945.epub T14/T14n0475.epub T48/T48n2008.epub T09/T09n0262.epub T10/T10n0279.epub).map { |name| {name:name}}.to_json

    end
  end


  desc '采集youtube视频'
  task :youtube do
    key = load_cfg.fetch('youtube').fetch('key')


    #DDMTV02 DDMTV04 DDMTV03 DDMTV01 DDMTV05
    #聖嚴法師經典講座|法鼓山經典講座|法鼓講堂|聖嚴法師大法鼓|Master Sheng Yen
    #
    channels=[]
    %w(DDMTV02 DDMTV04 DDMTV03 DDMTV01 DDMTV05).each do |user|
      puts "抓取用户[#{user}]"
      http_json_get("https://www.googleapis.com/youtube/v3/channels?part=snippet&maxResults=50&forUsername=#{user}&key=#{key}").fetch('items').map do |channel|
        ch_sn = channel.fetch('snippet')

        puts "\t抓取频道[#{ch_sn.fetch('title')}]"
        channels << {
            id: channel.fetch('id'),
            type: 'youtube',
            title: ch_sn.fetch('title'),
            description: ch_sn.fetch('description'),
            playlist: http_json_get("https://www.googleapis.com/youtube/v3/playlists?part=snippet&channelId=#{channel.fetch('id')}&maxResults=50&key=#{key}").fetch('items').map do |playlist|
              pl_sn = playlist.fetch('snippet')
              puts "\t\t抓取播放列表[#{pl_sn.fetch('title')}]"
              {
                  id: playlist.fetch('id'),
                  title: pl_sn.fetch('title'),
                  description: pl_sn.fetch('description'),
                  videos: http_json_get("https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&maxResults=50&playlistId=#{playlist.fetch('id')}&key=#{key}").fetch('items').map do |video|
                    v_sn = video.fetch('snippet')
                    {
                        id: v_sn.fetch('resourceId').fetch('videoId'),
                        title: v_sn.fetch('title'),
                        description: v_sn.fetch('description')
                    }
                  end
              }
            end
        }

      end
    end

    name = "#{File.dirname __FILE__}/../app/src/main/res/raw/videos.json"
    File.open(name, 'w') do |f|
      f.puts channels.to_json
    end

  end
end

