require 'yaml'
require 'json'
require 'net/http'
require 'sqlite3'
require 'highline/import'

RES_ROOT = "#{File.dirname(__FILE__)}/../app/src/main/res"

def load_cfg
  YAML.load_file('config.yml')
end

def http_get(url)
  JSON.parse(Net::HTTP.get(URI(url)))
end

def dump_str(s)
  #s.inspect[1..-2].gsub("'", %q(\\\'))
  s.inspect[1..-2].gsub(/'/, "''")
end

namespace :adb do
  desc '启动模拟器'
  task :em do
    sd = '/tmp/sd0'
    unless File.file?(sd)
      size = ask('虚拟SD卡大小？(G) ', Integer) do |q|
        q.in=2..8
        q.default = 2
      end
      puts `mksdcard #{size}G #{sd}`
    end
    wipe = ask('擦除虚拟SD卡？(y/n) ') { |q| q.default='n' }
    puts `/opt/android-sdk/tools/emulator64-arm -avd galaxy -netspeed full -netdelay none -sdcard #{sd} #{'-wipe-data' if wipe == 'y'}`
  end

  desc '网络调试连接'
  task :net do
    ip = ask('IP地址？ ') { |q| q.default='localhost' }
    port = ask('端口？ ', Integer) do |q|
      q.in=1024..65535
      q.default = 5555
    end
    puts `adb connect #{ip}:#{port}`
  end
end


namespace :image do
  desc '转换图片大小'
  task :convert do
    %w(books courses launcher morning musics evening sitting videos dict dzj zoom_in zoom_out action_favorite previous next ddc home help).each do |i|
      j="ic_#{i}.png"
      t = "#{RES_ROOT}/drawable"
      if File.file?("images/#{j}")
        puts `convert -resize 48x48 images/#{j} #{t}-mdpi/#{j}`
        puts `convert -resize 72x72 images/#{j} #{t}-hdpi/#{j}`
        puts `convert -resize 96x96 images/#{j} #{t}-xhdpi/#{j}`
        puts `convert -resize 144x144 images/#{j} #{t}-xxhdpi/#{j}`
      end
    end
  end
end

namespace :crawler do
  desc '抓取youtube视频地址'
  task :youtube do
    key = load_cfg.fetch('youtube').fetch('key')


    #DDMTV02 DDMTV04 DDMTV03 DDMTV01 DDMTV05
    #聖嚴法師經典講座|法鼓山經典講座|法鼓講堂|聖嚴法師大法鼓|Master Sheng Yen
    #
    channels=[]
    %w(DDMTV02 DDMTV04 DDMTV03 DDMTV01 DDMTV05).each do |user|
      puts "抓取用户[#{user}]"
      http_get("https://www.googleapis.com/youtube/v3/channels?part=snippet&maxResults=50&forUsername=#{user}&key=#{key}").fetch('items').map do |channel|
        ch_sn = channel.fetch('snippet')

        puts "\t抓取频道[#{ch_sn.fetch('title')}]"
        channels << {
            id: channel.fetch('id'),
            type: 'youtube',
            title: ch_sn.fetch('title'),
            description: ch_sn.fetch('description'),
            playlist: http_get("https://www.googleapis.com/youtube/v3/playlists?part=snippet&channelId=#{channel.fetch('id')}&maxResults=50&key=#{key}").fetch('items').map do |playlist|
              pl_sn = playlist.fetch('snippet')
              puts "\t\t抓取播放列表[#{pl_sn.fetch('title')}]"
              {
                  id: playlist.fetch('id'),
                  title: pl_sn.fetch('title'),
                  description: pl_sn.fetch('description'),
                  videos: http_get("https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&maxResults=50&playlistId=#{playlist.fetch('id')}&key=#{key}").fetch('items').map do |video|
                    v_sn = video.fetch('snippet')
                    {
                        id: v_sn.fetch('resourceId').fetch('videoId'),
                        title: v_sn.fetch('title'),
                        description: v_sn.fetch('description')
                    }
                  end
              }
            end
        }

      end
    end

    File.open("#{File.dirname __FILE__}/tmp/videos.sql", 'w') do |f|
      f.puts 'DELETE FROM channels;'
      f.puts 'DELETE FROM playlist;'
      f.puts 'DELETE FROM videos;'
      channels.each do |ch|

        f.puts "INSERT INTO channels(cid, type, title, description) VALUES('#{ch.fetch(:id)}', '#{ch.fetch(:type)}', '#{dump_str ch.fetch(:title)}', '#{dump_str ch.fetch(:description)}');"
        ch.fetch(:playlist).each do |pl|
          f.puts "INSERT INTO playlist(pid, cid, title, description) VALUES('#{pl.fetch(:id)}','#{ch.fetch(:id)}', '#{dump_str pl.fetch(:title)}', '#{dump_str pl.fetch(:description)}');"
          pl.fetch(:videos).each do |v|
            f.puts "INSERT INTO videos(vid, pid, title, description) VALUES('#{v.fetch(:id)}', '#{pl.fetch :id}', '#{dump_str v.fetch(:title)}', '#{dump_str v.fetch(:description)}');"
          end
        end
      end
    end


  end
end

