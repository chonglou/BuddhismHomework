require 'yaml'
require 'json'
require 'net/http'
require 'sqlite3'
require 'highline/import'
require 'nokogiri'
require 'open-uri'
require 'fileutils'
require 'digest'

RES_ROOT = "#{File.dirname(__FILE__)}/../app/src/main/res"

def load_cfg
  YAML.load_file('config.yml')
end

def http_json_get(url)
  JSON.parse Net::HTTP.get(URI(url))
end

def http_html_get(url)
  Nokogiri::HTML open(url)
end

def dump_str(s)
  #s.inspect[1..-2].gsub(/'/, "''")
  s.gsub(/'/, "''")
end

desc '生成MD5文件'
task :md5 do
  files = load_cfg.fetch('download').map do |k, v|
    n=v['name']
    n ||= k
    {
        name: k,
        dropbox: v.fetch('dropbox'),
        md5: Digest::MD5.file("#{File.dirname __FILE__}/tmp/#{n}").hexdigest
    }
  end
  File.open("#{File.dirname __FILE__}/tmp/file.lst", 'w') do |f|
    f.puts files.to_json
  end
end

desc '测试数据库脚本'
task :sql do
  %w(cbeta ddc videos).each do |name|
    sql = "#{File.dirname __FILE__}/tmp/#{name}.sql"
    if File.exists?(sql)
      puts "测试[#{name}]"
      puts `cat #{sql} | sqlite3 /tmp/bh.db`
    end
  end
end


namespace :adb do
  desc '启动模拟器'
  task :em do
    sd = '/tmp/sd0'
    unless File.file?(sd)
      size = ask('虚拟SD卡大小？(G) ', Integer) do |q|
        q.in=2..8
        q.default = 2
      end
      puts `mksdcard #{size}G #{sd}`
    end
    wipe = ask('擦除虚拟SD卡？(y/n) ') { |q| q.default='n' }
    puts `/opt/android-sdk/tools/emulator64-arm -avd galaxy -netspeed full -netdelay none -sdcard #{sd} #{'-wipe-data' if wipe == 'y'}`
  end

  desc '网络调试连接'
  task :net do
    ip = ask('IP地址？ ') { |q| q.default='localhost' }
    port = ask('端口？ ', Integer) do |q|
      q.in=1024..65535
      q.default = 5555
    end
    puts `adb connect #{ip}:#{port}`
  end
end


namespace :image do
  desc '转换图片大小'
  task :convert do
    %w(books courses launcher morning musics evening sitting videos dict dzj zoom_in zoom_out action_favorite previous next ddc home help storage).each do |i|
      j="ic_#{i}.png"
      t = "#{RES_ROOT}/drawable"
      if File.file?("images/#{j}")
        puts "转换[#{j}]"
        `convert -resize 48x48 images/#{j} #{t}-mdpi/#{j}`
        `convert -resize 72x72 images/#{j} #{t}-hdpi/#{j}`
        `convert -resize 96x96 images/#{j} #{t}-xhdpi/#{j}`
        `convert -resize 144x144 images/#{j} #{t}-xxhdpi/#{j}`
      end
    end
  end
end

def get_ddc(root, url, path)
  sleep 3
  puts "#{Time.now}: GET #{url}/#{path} => #{path}"
  content = http_html_get("#{url}/#{path}").css('div[data-role="page"]')

  fn = "#{root}/#{path}"

  return if File.exist?(fn)

  dn = File.dirname fn
  unless Dir.exist?(dn)
    FileUtils.mkpath dn
  end
  File.open(fn, 'w') { |f| f.puts content }


  content.css('a').each do |a|
    href = a['href']

    if href.start_with?('http')
      if href.start_with?(url)
        get_ddc root, url, href[url.size..-1]
      else
        puts "丢弃 #{href}"
      end
    else
      if href.end_with?('.php')
        if href.start_with?('/')
          get_ddc root, url, href[1..-1]
        else
          get_ddc root, url, "#{path[0..path.rindex('/')]}#{href}"
        end
      else
        puts "丢弃 #{href}"
      end
    end

  end

end

def random_name(name)
  "#{name}-#{Time.now.strftime '%Y%m%d%H%M%S'}"
end

namespace :crawler do
  desc '采集DDC'
  task :ddc do
    root = "#{File.dirname __FILE__}/tmp/ddc"
    ddc = load_cfg.fetch('ddc')

    craw = ask('要更新目录么？(Y/n) ') { |q| q.default='n' }
    if craw == 'Y'
      if Dir.exist?(root)
        FileUtils.move root, random_name(root)
      end
      puts "抓取DDC 开始时间 #{Time.new}"
      get_ddc root, ddc.fetch('url'), ddc.fetch('home')
    end

    if Dir.exist?(root)
      puts '开始批处理文件'

      new_dir = random_name root

      Dir["#{root}/**/*"].each do |fn|
        if File.file?(fn)

          content = File.open(fn, 'r').read
          title = Nokogiri::HTML(content).css('p[style="text-align:center"]').first.inner_text
          name = "#{new_dir}/#{fn[root.size+1..-1]}"
          if title
            d = File.dirname name
            FileUtils.mkpath(d) unless Dir.exists?(d)

            File.open(name, 'w') do |f|
              f.puts "<html><head><title>#{title}</title></head><body>"
              f.puts content
              f.puts '</body></html>'
            end
            `sed -i \"s/..\\/\\" rel=/..\\/index.php\\" rel=/g\" #{name}`
          else
            puts("找不到#{fn}的标题")
          end

        end
      end

      `sed -i \"s/..\\/pc.htm/index.php/g\" #{new_dir}/mobile/index.php`

      puts `cd #{new_dir} && zip -r #{new_dir}.zip *`
      puts "完毕 #{new_dir}.zip"
    end


  end

  desc '采集CBETA'
  task :cbeta do
    cbeta = "#{File.dirname __FILE__}/tmp/cbeta"
    puts `[ ! -d #{cbeta} ] && mkdir -pv #{cbeta} && cd #{cbeta} && unzip ../cbeta_epub_201405.zip`

    books=[]
    IO.foreach("#{cbeta}/filelist.txt") do |line|
      ss = line.split "\t\t"
      i = ss[1].index '【'

      books << {
          name: ss[0].chomp,
          title: (ss[1][i-1] == '　' ? ss[1][0..i-2] : ss[1][0..i-1]).chomp,
          author: ss[1][i..-1].chomp
      }
    end

    name = "#{File.dirname __FILE__}/tmp/cbeta.sql"
    File.open(name, 'w') do |f|
      f.puts 'DELETE FROM books;'
      books.each do |b|
        f.puts "INSERT INTO books(name, title, author) VALUES('#{b.fetch :name}', '#{b.fetch :title}', '#{b.fetch :author}');"
      end

      %w(T08/T08n0235.epub T08/T08n0251.epub T17/T17n0842.epub T16/T16n0670.epub T19/T19n0945.epub T14/T14n0475.epub T48/T48n2008.epub T09/T09n0262.epub T10/T10n0279.epub).each do |n|
        f.puts "UPDATE books SET fav=1 WHERE name='#{n}';"
      end

    end
    puts "采集到#{books.size}本书"
  end

  desc '采集youtube视频'
  task :youtube do
    key = load_cfg.fetch('youtube').fetch('key')


    #DDMTV02 DDMTV04 DDMTV03 DDMTV01 DDMTV05
    #聖嚴法師經典講座|法鼓山經典講座|法鼓講堂|聖嚴法師大法鼓|Master Sheng Yen
    #
    channels=[]
    %w(DDMTV02 DDMTV04 DDMTV03 DDMTV01 DDMTV05).each do |user|
      puts "抓取用户[#{user}]"
      http_json_get("https://www.googleapis.com/youtube/v3/channels?part=snippet&maxResults=50&forUsername=#{user}&key=#{key}").fetch('items').map do |channel|
        ch_sn = channel.fetch('snippet')

        puts "\t抓取频道[#{ch_sn.fetch('title')}]"
        channels << {
            id: channel.fetch('id'),
            type: 'youtube',
            title: ch_sn.fetch('title'),
            description: ch_sn.fetch('description'),
            playlist: http_json_get("https://www.googleapis.com/youtube/v3/playlists?part=snippet&channelId=#{channel.fetch('id')}&maxResults=50&key=#{key}").fetch('items').map do |playlist|
              pl_sn = playlist.fetch('snippet')
              puts "\t\t抓取播放列表[#{pl_sn.fetch('title')}]"
              {
                  id: playlist.fetch('id'),
                  title: pl_sn.fetch('title'),
                  description: pl_sn.fetch('description'),
                  videos: http_json_get("https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&maxResults=50&playlistId=#{playlist.fetch('id')}&key=#{key}").fetch('items').map do |video|
                    v_sn = video.fetch('snippet')
                    {
                        id: v_sn.fetch('resourceId').fetch('videoId'),
                        title: v_sn.fetch('title'),
                        description: v_sn.fetch('description')
                    }
                  end
              }
            end
        }

      end
    end

    name = "#{File.dirname __FILE__}/tmp/videos.sql"
    File.open(name, 'w') do |f|
      f.puts 'DELETE FROM channels;'
      f.puts 'DELETE FROM playlist;'
      f.puts 'DELETE FROM videos;'
      channels.each do |ch|

        f.puts "INSERT INTO channels(cid, type, title, description) VALUES('#{ch.fetch(:id)}', '#{ch.fetch(:type)}', '#{dump_str ch.fetch(:title)}', '#{dump_str ch.fetch(:description)}');"
        ch.fetch(:playlist).each do |pl|
          f.puts "INSERT INTO playlist(pid, cid, title, description) VALUES('#{pl.fetch(:id)}','#{ch.fetch(:id)}', '#{dump_str pl.fetch(:title)}', '#{dump_str pl.fetch(:description)}');"
          pl.fetch(:videos).each do |v|
            f.puts "INSERT INTO videos(vid, pid, title, description) VALUES('#{v.fetch(:id)}', '#{pl.fetch :id}', '#{dump_str v.fetch(:title)}', '#{dump_str v.fetch(:description)}');"
          end
        end
      end
    end

  end
end

